#My solution of PCC 17.2 excercise with some variation. It gathers score value, instead of comments.

import requests
from operator import itemgetter
from plotly import offline

url = 'https://hacker-news.firebaseio.com/v0/beststories.json'
r = requests.get(url)
print(f'Status code: {r.status_code}')

submission_ids = r.json()
submission_dicts = []
submission_links, score = [], []

for submission_id in submission_ids[:10]:

    url = f'https://hacker-news.firebaseio.com/v0/item/{submission_id}.json'
    r = requests.get(url)

    print(f"id: {submission_id}\tstatus: {r.status_code}")
    response_dict = r.json()

    submission_name = response_dict['title']
    submission_url = f"http://news.ycombinator.com/item?id={submission_id}"
    submission_link = f"<a href='{submission_url}'>{submission_name}</a>"
    score.append(response_dict['score'])

    submission_links.append(submission_link)
    try:
        submission_dict = {
            'title': response_dict['title'],
            'hn_link': f"http://news.ycombinator.com/item?id={submission_id}",
            'score': response_dict['score'],
        }
    except KeyError:
        continue
    else:
        submission_dicts.append(submission_dict)


submission_dicts = sorted(submission_dicts, key=itemgetter('score'),
                          reverse=True)

for x in submission_dicts:
    print(f"\nArticle title: {x['title']}")
    print(f"\nLink: {x['hn_link']}")
    print(f"Score: {x['score']}")

data = [{
    'type': 'bar',
    'x': submission_links,
    'y': score,
    'marker': {
        'color': 'rgb(60, 100, 150)',
        'line': {'width': 1.5, 'color': 'rgb(25, 25, 25)'}
    },
    'opacity': 0.5,
}]

my_layout = {
    'title': 'Highest score on Hacker News',
    'titlefont': {'size': 28},
    'xaxis': {
        'title': 'Articles',
        'titlefont': {'size': 14},
        'tickfont': {'size': 10},
    },
    'yaxis': {
        'title': 'Score',
        'titlefont': {'size': 14},
        'tickfont': {'size': 10},
    }
}

fig = {'data': data, 'layout': my_layout}
offline.plot(fig, filename='hn_submissions.html')
